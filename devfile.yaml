schemaVersion: 2.2.2
metadata:
  name: contract-demo
projects:
  - name: contract-backend
    git:
      remotes:
        origin: 'https://github.com/marcoklaassen/devspaces-contract-demo-backend'
  - name: infrastructure
    git:
      remotes:
        origin: 'https://github.com/marcoklaassen/devspaces-contract-demo-infrastructure'
  - name: customer-api
    git:
      remotes:
        origin: 'https://github.com/marcoklaassen/devspaces-contract-demo-customer-api'
  - name: devspaces
    git:
      remotes:
        origin: 'https://github.com/marcoklaassen/devspaces-contract-demo-devspaces'
          
components:
  - name: tools
    container:
      image: quay.io/mklaasse/udi-rhel9:jdk21
      env:
        - name: QUARKUS_HTTP_HOST
          value: 0.0.0.0
      endpoints:
        - exposure: none
          name: debug
          protocol: tcp
          targetPort: 5005
        - exposure: public
          name: contract
          protocol: https
          targetPort: 8080
          path: /contract
      volumeMounts:
        - name: m2
          path: /home/user/.m2
      cpuLimit: '4'
      cpuRequest: '1'
      memoryLimit: '8G'
      memoryRequest: '4G'
      mountSources: true
  - name: m2
    volume:
      size: 1G
commands:
  - id: 0-install-infrastructure
    exec:
      label: "0. [Infrastructure] Install Infrastructure Helm Chart"
      component: tools
      workingDir: ${PROJECTS_ROOT}/infrastructure
      commandLine: "helm upgrade infrastructure . --install"
  - id: 1-package-backend
    exec:
      label: "1. [contract-backend] Package"
      component: tools
      workingDir: ${PROJECTS_ROOT}/contract-backend
      commandLine: "mvn package"
      group:
        kind: build
        isDefault: true
  - id: 2-dev-backend
    exec:
      label: "2. [contract-backend] Start Development mode (quarkus-dev)"
      component: tools
      workingDir: ${PROJECTS_ROOT}/contract-backend
      commandLine: | 
        # Workaround: not able to inject Secrets managed by Strimzi operator in DevSpaces, yet \
        KAFKA_SASL_JAAS_CONFIG=$(oc get secret kafka-developer -o json | jq -r '.data."sasl.jaas.config"' | base64 --decode) \
        BOOTSTRAP_SERVERS=$(oc get svc kafka-kafka-bootstrap -o json | jq -r '.metadata.name + ":" + (.spec.ports[] | select(.name == "tcp-clients").port | tostring)') \
        quarkus dev
      group:
        kind: run
        isDefault: true